\input{introduction}

\section{MDE: Model Driven Engineering}
Model-driven engineering (MDE) is a software development methodology which focuses on creating models rather than computing and algorithmic concepts usually addressed in the classical programming approaches.
This discipline attempts an abstraction of the benefits and the features provided by the Software Engineering \cite{Marrone}, usually creating a domain specific framework for implementing new systems, based on well known and tested concepts, obtained through a careful and detailled analysis of the domain and its actors.
The best known MDE initiative is the Object Management Group (OMG) initiative Model-Driven Architecture (MDA), which is a registered trademark of OMG \cite{MDE}.

%---Brief overview on SOC and SOA---
\subsection{Services and composition, SOC and SOA}
During the years preceding the large spread of the internet, companies used to create their own software systems, in order to obtain highly customized and specific services, rarely focused on the accessibility by external partners.
Today, with the necessity of exchanging information among different companies and businesses, and the push made by the large growth of the Internet, the focus has moved to the integration and the coordination of the existing softwares, namely, the integration of these systems over larger networks.
Defining a \textit{service} as a distributed application that exports a view of its functionalities  \cite{DiLorenzo08}, what is needed is the possibility to compose different services together.
For example, it might be useful to integrate a service (already available on a net), providing maps of a city, with a web-based service listings thelephone numbers of a given city zone, resulting in a new service showing telephone numbers on the map. \fxnote{I might add a picture to better show the example here} 


The \textit{Service Oriented Computing} (SOC) is the paradigm that attempts to wrap and adapt exisisting applications into new services \cite{DiLorenzo08,Papazoglou03}, keeping security and ease of data sharing.
The architectural infrastructure to the SOC is called \textit{Service Oriented Architecture} (SOA). The idea behind the SOA is to describe, publish and make available web services (generally speaking, a combination of services) to the possible requestors.

it is split up into provider, broker and requestor \cite{Pernici04} \nl

%---Who is dealing with logic and flow?---
%\subsubsection{Web Services workflow management: Orchestration vs Choreography}
- Who is going to deal with the logic and flow of the composition? \nl
- Two main approaches: Orchestration and Choreography, where is the difference \cite{Peltz03} \nl
- The concept of Workflow management \cite{Aalst98} (picture) and why BPEL is good at it.  \nl


%---Where the problem is---
\subsection{BPEL, its drawbacks and the use of WSs in a lightweight scenario}
%\subsection{The drawbacks of using BPEL (BPEL and its possible drawbacks)}
- BPEL, the de-facto standard concerning web services composition. \nl
- Overview and brief review\nl
- What do we use of it, the whole language or just a part? \nl %Questo dove andr√†??
- Problems: It works over Distributed Systems, engine powerful but heavy, DS not always available. \nl %i problemi che ha in generale e quelli specifici al nostro caso

%---Why we face the problem and which is the possible solution (and aim of the work)---
%\subsection{Web Services Composition in lightweight scenario}
- That's our question \nl
- Sometimes we might need services composition working in less powerful environments than distributed systems. Examples? \nl
- But we don't want to create a new application from scratch neither...(change hardware?).  \nl
%---Other works, our approach and what we achieve---
\subsection{Other works and proposed approach}
- Other similar works: don't know any yet. \nl
- Our attempt is to use the M2T techniques to obtain from a BPEL WSs composition a JavaRMI equivalent application \nl
- Where the limits of our solution are (BPEL subset? Lack of heavy test case? Doesn't work at all?...) \nl
- Where future work might be leaded \nl



%--------------------------------------------------------------------------------

% How we do it: Why we do it, What particular method we use and what logic architecture we use
\section{The methodological approach}
%---What methodology we used---
- Step by step \nl
- Phase 1 \nl
- Phase 2 \nl 
- ... \nl

%---Motivation: why do we move from DS to lightweight

%\subsection{Orchestration/Choreography (maybe Composition?) in a lightweight scenario}
%- Distributed System, why they are heavy and what are some specific problems during the deployment of a Composition(problems we won't encounter in JavaRMI, speed, check my BPEL project for more) \nl
%- Lightweight scenario: why do we move here (mobile phones, Java runs everywhere, technology not ready to run BPEL engine everywhere) \nl



%---Brief Literature review to introduce the tools Java RMI, JET, and the technique MDA--- 
\section{Tools and Techniques}


%---Introduction to the MDA and how it basically works
\subsection{The Model Driven Architecture (MDA)}
- What it is \nl
- Why we use it, why is good (because it is generic, Architecture independent, Reuse)  \nl
- How we use it: From BPEL processes to Java RMI processes \nl
\subsection{Java RMI}
- Overview, features.
- Why? it can run everywhere, lightweight scenarios  \nl
\subsection{Jet}
\subsection{EMF and Open Architecture Ware (Eclipse)}
\subsection{other...} 
%----------------------------------------------------------------------------------

%---Detailed Architecture---
%\fxnote{to be done}
\section{Detailed Architecture}
\section{Implementation}
\section{Discussion}
\section{Conclusion}
















